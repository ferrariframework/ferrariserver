// Code generated by goagen v1.1.0, command line:
// $ main
//
// API "ferrariserver": Application User Types
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"github.com/goadesign/goa"
	"unicode/utf8"
)

// resourceLink user type.
type resourceLink struct {
	// Represents a link href
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// Represents the link http Method
	Method *string `form:"method,omitempty" json:"method,omitempty" xml:"method,omitempty"`
	// Represents a link rel
	Rel *string `form:"rel,omitempty" json:"rel,omitempty" xml:"rel,omitempty"`
}

// Publicize creates ResourceLink from resourceLink
func (ut *resourceLink) Publicize() *ResourceLink {
	var pub ResourceLink
	if ut.Href != nil {
		pub.Href = ut.Href
	}
	if ut.Method != nil {
		pub.Method = ut.Method
	}
	if ut.Rel != nil {
		pub.Rel = ut.Rel
	}
	return &pub
}

// ResourceLink user type.
type ResourceLink struct {
	// Represents a link href
	Href *string `form:"href,omitempty" json:"href,omitempty" xml:"href,omitempty"`
	// Represents the link http Method
	Method *string `form:"method,omitempty" json:"method,omitempty" xml:"method,omitempty"`
	// Represents a link rel
	Rel *string `form:"rel,omitempty" json:"rel,omitempty" xml:"rel,omitempty"`
}

// workerPayload user type.
type workerPayload struct {
	// Worker description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Worker environment variables
	Environment map[string]interface{} `form:"environment,omitempty" json:"environment,omitempty" xml:"environment,omitempty"`
	// Worker name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the workerPayload type instance.
func (ut *workerPayload) Validate() (err error) {
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 2, true))
		}
	}
	return
}

// Publicize creates WorkerPayload from workerPayload
func (ut *workerPayload) Publicize() *WorkerPayload {
	var pub WorkerPayload
	if ut.Description != nil {
		pub.Description = ut.Description
	}
	if ut.Environment != nil {
		pub.Environment = ut.Environment
	}
	if ut.Name != nil {
		pub.Name = ut.Name
	}
	return &pub
}

// WorkerPayload user type.
type WorkerPayload struct {
	// Worker description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Worker environment variables
	Environment map[string]interface{} `form:"environment,omitempty" json:"environment,omitempty" xml:"environment,omitempty"`
	// Worker name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the WorkerPayload type instance.
func (ut *WorkerPayload) Validate() (err error) {
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 2, true))
		}
	}
	return
}
